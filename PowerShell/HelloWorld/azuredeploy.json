{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "functionAppName": {
            "type": "string"
        }
    },
    "variables": {
        "hostingPlanName": "[parameters('functionAppName')]",
        "location": "[resourceGroup().location]",
        "storageAccountName": "[concat('storage', uniquestring(resourceGroup().id))]",
        "workerSize": "0",
        "sku": "Basic",
        "skuCode": "B1",
        "functionName": "HelloWorld",
        "contributorId": "b24988ac-6180-42a0-ab88-20f7382dd24c"
    },
    "resources": [
        {
            "name": "[parameters('functionAppName')]",
            "type": "Microsoft.Web/sites",            
            "dependsOn": [
                "[concat('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('microsoft.insights/components/', parameters('functionAppName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "powershell"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1)]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~2"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('microsoft.insights/components/', parameters('functionAppName')), '2015-05-01').InstrumentationKey]"
                        }
                    ]
                },
                "name": "[parameters('functionAppName')]",
                "clientAffinityEnabled": false,
                "serverFarmId": "[concat('/subscriptions/', subscription().subscriptionId,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]"
            },
            "apiVersion": "2018-02-01",
            "location": "[variables('location')]",
            "kind": "functionapp"
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2015-04-01",
            "name": "[variables('hostingPlanName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "name": "[variables('hostingPlanName')]",
                "computeMode": "Dynamic",
                "sku": "Dynamic"
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountName')]",
            "location": "[variables('location')]",
            "properties": {
                "accountType": "Standard_LRS"
            }
        },
        {
            "apiVersion": "2015-05-01",
            "name": "[parameters('functionAppName')]",
            "type": "Microsoft.Insights/components",
            "location": "[variables('location')]",
            "tags": {
                "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', parameters('functionAppName'))]": "Resource"
            },
            "properties": {
                "ApplicationId": "[parameters('functionAppName')]"
            }
        },
        {
            "apiVersion": "2015-08-01",
            "name": "[concat(parameters('functionAppName'),'/', variables('functionName'))]",
            "type": "Microsoft.Web/sites/functions",
            "dependsOn": [
                "[concat('Microsoft.Web/sites/', parameters('functionAppName'))]"
            ],
            "properties": {
              "config": {
                "bindings": [
                  {
                    "name": "Request",
                    "direction": "in",
                    "type": "httpTrigger"
                  },
                  {
                    "name": "Result",
                    "direction": "out",
                    "type": "http"
                  }
                ]
              },
              "files": {
                  "run.ps1": "param($Request, $TriggerMetadata)\r\n\r\n$ErrorActionPreference = 'stop'\r\n$env:PSModulePath = $env:PSModulePath + \";D:\\Program Files (x86)\\ManagedDependencies\\PowerShell\\AzPSModules\\1.0.0\"\r\n# Write to the Azure Functions log stream.\r\nWrite-Information (\"Starting function...\") \r\n\r\nif ($null -ne $Env:MSI_ENDPOINT)\r\n{\r\n    Write-Information (\"Authenticating with MSI as we are running within Azure with managed identity enabled\")\r\n    $TokenAuthURI = $env:MSI_ENDPOINT + \"?resource=https:\/\/management.azure.com\/&api-version=2017-09-01\"\r\n    $TokenResponse = Invoke-RestMethod -Method Get -Headers @{\"Secret\"=\"$env:MSI_SECRET\"} -Uri $TokenAuthURI\r\n    \r\n    # Get subscription id from the website owner name environment variables and authenticate to Azure\r\n    $Website_owner_name = $env:WEBSITE_OWNER_NAME\r\n    $SubscriptionId = $Website_owner_name.Substring(0,$Website_owner_name.IndexOf('+'))\r\n    $AppName = $env:APPSETTING_WEBSITE_SITE_NAME\r\n    Login-AzAccount -SubscriptionId $SubscriptionId -AccessToken $TokenResponse.access_token `\r\n                    -AccountId $AppName | Write-Information\r\n}\r\n\r\nif ($Request.Method -eq \"POST\")\r\n{\r\n    Write-Information (\"Post method used\")\r\n    if ($null -ne $Request.Body) \r\n    {\r\n        Write-Information (ConvertTo-Json $Request.Body)  \r\n    }  \r\n}\r\nelse\r\n{\r\n    Write-Information (\"Get method used\")\r\n    if ($null -ne $Request.Query) \r\n    {\r\n        Write-Information (ConvertTo-Json $Request.Query)\r\n    }\r\n}\r\n\r\n# Write out all of the resources\r\nGet-AzResource"
              }
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "name": "[guid(parameters('functionAppName'))]",
            "apiVersion": "2017-09-01",
            "dependsOn": [
                "[concat('Microsoft.Web/sites/', parameters('functionAppName'), '/functions/', variables('functionName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('contributorId'))]",
                "principalId": "[reference(concat(resourceId('Microsoft.Web/sites/', parameters('functionAppName')), '/providers/Microsoft.ManagedIdentity/Identities/default'), '2015-08-31-PREVIEW').principalId]"
            }
        }
    ],
    "outputs": {
        "principalId": {
          "type": "string",
          "value": "[reference(concat(resourceId('Microsoft.Web/sites/', parameters('functionAppName')), '/providers/Microsoft.ManagedIdentity/Identities/default'), '2015-08-31-PREVIEW').principalId]"
        }
    }
}
